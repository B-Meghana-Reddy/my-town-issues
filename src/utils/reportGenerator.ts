import { Filesystem, Directory, Encoding } from '@capacitor/filesystem';
import { Share } from '@capacitor/share';
import { Capacitor } from '@capacitor/core';

export interface Issue {
  id: string;
  title: string;
  category: string;
  location: string;
  status: string;
  priority: string;
  date: string;
  reportedBy?: string;
  assignedTo?: string;
  description: string;
  reporterContact?: string;
  estimatedCompletion?: string;
  imageUrl?: string;
  lat?: number;
  lng?: number;
}

export const generateOverallReport = async (issues: Issue[]) => {
  const reportDate = new Date().toISOString().split('T')[0];
  const timestamp = new Date().toLocaleString();
  
  // Calculate statistics
  const totalIssues = issues.length;
  const resolvedIssues = issues.filter(i => i.status.toLowerCase() === 'resolved').length;
  const pendingIssues = issues.filter(i => i.status.toLowerCase() === 'pending').length;
  const inProgressIssues = issues.filter(i => i.status.toLowerCase() === 'in progress').length;
  const urgentIssues = issues.filter(i => i.status.toLowerCase() === 'urgent').length;
  
  const resolutionRate = totalIssues > 0 ? ((resolvedIssues / totalIssues) * 100).toFixed(1) : '0';
  
  // Category breakdown
  const categories = issues.reduce((acc, issue) => {
    acc[issue.category] = (acc[issue.category] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);
  
  // Priority breakdown
  const priorities = issues.reduce((acc, issue) => {
    acc[issue.priority] = (acc[issue.priority] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);
  
  // Location breakdown
  const locations = issues.reduce((acc, issue) => {
    acc[issue.location] = (acc[issue.location] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);

  // Generate report content
  const reportContent = `
GUNTUR MUNICIPAL CORPORATION
CIVIC ISSUES OVERALL REPORT
Generated on: ${timestamp}
==================================================

📊 EXECUTIVE SUMMARY
==================================================
Total Issues Reported: ${totalIssues}
Resolved Issues: ${resolvedIssues}
Pending Issues: ${pendingIssues}
In Progress: ${inProgressIssues}
Urgent Issues: ${urgentIssues}
Overall Resolution Rate: ${resolutionRate}%

📈 ISSUE BREAKDOWN BY CATEGORY
==================================================
${Object.entries(categories)
  .map(([category, count]) => `${category}: ${count} (${((count / totalIssues) * 100).toFixed(1)}%)`)
  .join('\n')}

🚨 PRIORITY DISTRIBUTION
==================================================
${Object.entries(priorities)
  .map(([priority, count]) => `${priority}: ${count} (${((count / totalIssues) * 100).toFixed(1)}%)`)
  .join('\n')}

📍 TOP AFFECTED LOCATIONS
==================================================
${Object.entries(locations)
  .sort(([,a], [,b]) => b - a)
  .slice(0, 10)
  .map(([location, count]) => `${location}: ${count} issues`)
  .join('\n')}

📋 DETAILED ISSUE LIST
==================================================
${issues.map((issue, index) => `
${index + 1}. ${issue.title}
   ID: ${issue.id}
   Category: ${issue.category}
   Location: ${issue.location}
   Status: ${issue.status}
   Priority: ${issue.priority}
   Reported: ${issue.date}
   Assigned to: ${issue.assignedTo || 'Not assigned'}
   Description: ${issue.description}
   Reporter: ${issue.reportedBy || 'Anonymous'}
   Contact: ${issue.reporterContact || 'Not provided'}
   Expected Completion: ${issue.estimatedCompletion || 'Not set'}
   ---`).join('\n')}

🔍 PERFORMANCE INSIGHTS
==================================================
• Most common issue type: ${Object.entries(categories).sort(([,a], [,b]) => b - a)[0]?.[0] || 'N/A'}
• Highest priority location: ${Object.entries(locations).sort(([,a], [,b]) => b - a)[0]?.[0] || 'N/A'}
• Urgent issues requiring immediate attention: ${urgentIssues}
• Average issues per location: ${(totalIssues / Object.keys(locations).length).toFixed(1)}

📞 CONTACT INFORMATION
==================================================
Guntur Municipal Corporation
Emergency Helpline: 1800-XXX-XXXX
Email: support@gunturgov.in
Website: www.gunturcorporation.gov.in

==================================================
Report generated by Guntur Civic Issues Management System
© ${new Date().getFullYear()} Guntur Municipal Corporation
  `;

  const fileName = `guntur-civic-report-${reportDate}.txt`;

  if (Capacitor.isNativePlatform()) {
    // Mobile platform - use Capacitor Filesystem and Share
    try {
      const writeResult = await Filesystem.writeFile({
        path: fileName,
        data: reportContent,
        directory: Directory.Documents,
        encoding: Encoding.UTF8,
      });

      // Share the file
      await Share.share({
        title: 'Guntur Civic Issues Report',
        text: `Civic Issues Report generated on ${timestamp}`,
        url: writeResult.uri,
        dialogTitle: 'Share Report'
      });

      return { success: true, fileName, message: 'Report generated and shared successfully!' };
    } catch (error) {
      console.error('Error generating mobile report:', error);
      return { success: false, error: 'Failed to generate report on mobile device' };
    }
  } else {
    // Web platform - use download
    try {
      const blob = new Blob([reportContent], { type: 'text/plain' });
      const url = window.URL.createObjectURL(blob);
      
      const link = document.createElement('a');
      link.href = url;
      link.download = fileName;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      window.URL.revokeObjectURL(url);
      
      return { success: true, fileName, message: 'Report downloaded successfully!' };
    } catch (error) {
      console.error('Error generating web report:', error);
      return { success: false, error: 'Failed to generate report for web' };
    }
  }
};

export const generateDepartmentReport = async (issues: Issue[], departmentName: string) => {
  const departmentIssues = issues.filter(issue => 
    issue.assignedTo?.toLowerCase().includes(departmentName.toLowerCase())
  );
  
  return generateOverallReport(departmentIssues);
};

export const generateLocationReport = async (issues: Issue[], location: string) => {
  const locationIssues = issues.filter(issue => 
    issue.location.toLowerCase().includes(location.toLowerCase())
  );
  
  return generateOverallReport(locationIssues);
};